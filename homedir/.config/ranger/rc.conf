						# This file contains the default startup commands for ranger.
				# To change them, it is recommended to create the file
				# ~/.config/ranger/rc.conf and add your custom commands there.
				#
				# If you copy this whole file there, you may want to set the environment
				# variable RANGER_LOAD_DEFAULT_RC to FALSE to avoid loading it twice.
				#
					# The purpose of this file is mainly to define keybindings and settings.
					# For running more complex python code, please create a plugin in "plugins/" or
					# a command in "commands.py".
					#
					# Each line is a command that will be run before the user interface
					# is initialized.  As a result, you can not use commands which rely
					# on the UI such as :delete or :mark.
					# ===================================================================

					# ===================================================================
					# == Options
					# ===================================================================

					# Which viewmode should be used?  Possible values are:
					#     miller: Use miller columns which show multiple levels of the hierarchy
					#     multipane: Midnight-commander like multipane view showing all tabs next
					#                to each other
					set viewmode miller
					#set viewmode multipane

					# How many columns are there, and what are their relative widths?
					set column_ratios 1,3,4

					# Which files should be hidden? (regular expression)
					set hidden_filter ^\.|\.(?:pyc|pyo|bak|swp)$|^lost\+found$|^__(py)?cache__$

					# Show hidden files? You can toggle this by typing 'zh'
					set show_hidden true

					# Ask for a coseperators
					# Valid values are "always", "never", "multiple" (default)
					# With "multiple", ranger will ask only if you delete multiple files at once.
					set confirm_on_delete multiple

					# Which script is used to generate file previews?
					# ranger ships with scope.sh, a script that calls external programs (see
					# README.md for dependencies) to preview images, archives, etc.
					set preview_script ~/.config/ranger/scope.sh

					# Use the external preview script or display simple plain text or image previews?
					set use_preview_script true

					# Automatically count files in the directory, even before entering them?
					set automatically_count_files true

					# Open all images in this directory when running certain image viewers
					# like feh or sxiv?  You can still open selected files by marking them.
					set open_all_images true

					# Be aware of version control systems and display information.
					set vcs_aware false

					# State of the three backends git, hg, bzr. The possible states are
					# disabled, local (only show local info), enabled (show local and remote
					# information).
					set vcs_backend_git enabled
					set vcs_backend_hg disabled
					set vcs_backend_bzr disabled

					# Use one of the supported image preview protocols
					set preview_images true

					# Set the preview image method. Supported methods:
					#
					# * w3m (default):
					#   Preview images in full color with the external command "w3mimgpreview"?
					#   This requires the console web browser "w3m" and a supported terminal.
					#   It has been successfully tested with "xterm" and "urxvt" without tmux.
					#
					# * iterm2:
					#   Preview images in full color using iTerm2 image previews
					#   (http://iterm2.com/images.html). This requires using iTerm2 compiled
					#   with image preview support.
					#
					# * urxvt:
					#   Preview images in full color using urxvt image backgrounds. This
					#   requires using urxvt compiled with pixbuf support.
					#
					# * urxvt-full:
					#   The same as urxvt but utilizing not only the preview pane but the
					#   whole terminal window.
				# set preview_images_method w3m 
				set preview_images_method ueberzug

				# Use a unicode "..." character to mark cut-off filenames?
				set unicode_ellipsis false

				# Show dotfiles in the bookmark preview box?
				set show_hidden_bookmarks true

				# Which colorscheme to use?  These colorschemes are available by default:
				# default, jungle, snow, solarized, zenburn
				set colorscheme yann

				# Preview files on the rightmost column?
				# And collapse (shrink) the last column if there is nothing to preview?
				set preview_files true
				set preview_directories true
				set collapse_preview true

				# Save the console history on exit?
				set save_console_history true

				# Draw the status bar on top of the browser window (default: bottom)
				set status_bar_on_top false

				# Draw a progress bar in the status bar which displays the average state of all
				# currently running tasks which support progress bars?
				set draw_progress_bar_in_status_bar true

				# Draw borders around columns?
				set draw_borders true

				# Display the directory name in tabs?
				set dirname_in_tabs true

				# Enable the mouse support?
				set mouse_enabled true

				# Display the file size in the main column or status bar?
				set display_size_in_main_column true
				set display_size_in_status_bar true

				# Display files tags in all columns or only in main column?
				set display_tags_in_all_columns true

				# Set a title for the window?
				set update_title false

				# Set the title to "ranger" in the tmux program?
				set update_tmux_title false

				# Shorten the title if it gets long?  The number defines how many
				# directories are displayed at once, 0 turns off this feature.
				set shorten_title 3

				# Abbreviate $HOME with ~ in the titlebar (first line) of ranger?
				set tilde_in_titlebar true

				# How many directory-changes or console-commands should be kept in history?
				set max_history_size 20
				set max_console_history_size 50

				# Try to keep so much space between the top/bottom border when scrolling:
				set scroll_offset 8

				# Flush the input after each key hit?  (Noticeable when ranger lags)
				set flushinput true

				# Padding on the right when there's no preview?
				# This allows you to click into the space to run the file.
				set padding_right true

				# Save bookmarks (used with mX and `X) instantly?
				# This helps to synchronize bookmarks between multiple ranger
				# instances but leads to *slight* performance loss.
				# When false, bookmarks are saved when ranger is exited.
				set autosave_bookmarks true

				# You can display the "real" cumulative size of directories by using the
				# command :get_cumulative_size or typing "dc".  The size is expensive to
				# calculate and will not be updated automatically.  You can choose
				# to update it automatically though by turning on this option:
				set autoupdate_cumulative_size false

				# Turning this on makes sense for screen readers:
				set show_cursor false

				# One of: size, natural, basename, atime, ctime, mtime, type, random
				set sort natural

				# Additional sorting options
				set sort_reverse false
				set sort_case_insensitive true
				set sort_directories_first true
				set sort_unicode false

				# Enable this if key combinations with the Alt Key don't work for you.
				# (Especially on xterm)
				set xterm_alt_key false

				# Whether to include bookmarks in cd command
				set cd_bookmarks true

				# Avoid previewing files larger than this size, in bytes.  Use a value of 0 to
				# disable this feature.
				set preview_max_size 0

				# Add the highlighted file to the path in the titlebar
				set show_selection_in_titlebar true

				# The delay that ranger idly waits for user input, in milliseconds, with a
				# resolution of 100ms.  Lower delay reduces lag between directory updates but
				# increases CPU load.
				set idle_delay 2000

				# When the metadata manager module looks for metadata, should it only look for
				# a ".metadata.json" file in the current directory, or do a deep search and
				# check all directories above the current one as well?
				set metadata_deep_search false

				# Clear all existing filters when leaving a directory
	set clear_filters_on_dir_change false

	# Disable displaying line numbers in main column
	set line_numbers false

	# ===================================================================
	# == Local Options
	# ===================================================================
	# You can set local options that only affect a single directory.

	# Examples:
	# setlocal path=~/downloads sort mtime

	# ===================================================================
	# == Command Aliases in the Console
	# ===================================================================

	# alias e    edit
	# alias q!   quitall
	# alias qa   quitall
	# alias qall quitall
	# alias setl setlocal

	alias filter     scout -prt
	alias find       scout -aeit
	alias mark       scout -mr
	alias unmark     scout -Mr
	alias search     scout -rs
	alias search_inc scout -rts
	alias travel     scout -aefiklst

	# ===================================================================
	# == Define keys for the browser
	# ===================================================================

	# Basic
	map Q noop #unbind key so we can rebind it
	map     Q quitall


	#copymap q ZZ ZQ

	# map R     reload_cwd
	# map <C-R> reset
	map f5 redraw_window
	map <C-c> abort
	map <esc> change_mode normal

	map i display_file
	map ? help
	map W display_log
	map w taskview_open
	map S shell $SHELL

	map :  console
	map ;  console
	map !  console shell%space
	map @  console -p6 shell  %%s
	map #  console shell -p%space
	map s  console shell%space
	map r  chain draw_possible_programs; console open_with%space
	map f  console find%space
	map cd console cd%space

	# Change the line mode
	map Mf linemode filename
	map Mi linemode fileinfo
	map Mm linemode mtime
	map Mp linemode permissions
	map Ms linemode sizemtime
	map Mt linemode metatitle

	# Tagging / Marking
	map t       tag_toggle
	map ut      tag_remove
	map "<any>  tag_toggle tag=%any
	map <Space> mark_files toggle=True
	map v       mark_files all=True toggle=True
	map uv      mark_files all=True val=False
	map V       toggle_visual_mode
	map uV      toggle_visual_mode reverse=True

	# In case you work on a keyboard with dvorak layout
	map <UP>       move up=1
	map <DOWN>     move down=1
	map <LEFT>     move left=1
	map <RIGHT>    move right=1
	map <HOME>     move to=0
	map <END>      move to=-1
	map <PAGEDOWN> move down=1   pages=True
	map <PAGEUP>   move up=1     pages=True
	map <CR>       move right=1
	#map <DELETE>   console delete
	map <INSERT>   console touch%space

	# VIM-like
	copymap <UP>       k
	copymap <DOWN>     j
	copymap <LEFT>     h
	copymap <RIGHT>    l
	copymap <HOME>     gg
	copymap <END>      G
	copymap <PAGEDOWN> <C-F>
	copymap <PAGEUP>   <C-B>

	map J  move down=0.5  pages=True
	map K  move up=0.5    pages=True
	copymap J <C-D>
	copymap K <C-U>

# Jumping around
map <C-h>     history_go -1
map <C-l>     history_go 1
map ]     move_parent 1
map [     move_parent -1
map }     traverse

map gh cd ~
map ge cd /etc
map gu cd /usr
map gd cd /dev
map gl cd -r .
map gL cd -r %f
map go cd /opt
map gv cd /var
map gs cd /srv
map gr cd /
map gR eval fm.cd(ranger.RANGERDIR)
map g/ cd /
map g? cd /usr/share/doc/ranger

# External Programs
map E  edit
map du shell -p du --max-depth=1 -h --apparent-size
map dU shell -p du --max-depth=1 -h --apparent-size | sort -rh
map df shell -p df -h
# copy file path
map yp shell -f echo -n %d/%f | xsel -i; xsel -o | xsel -i -b
map yP shell -f echo -n %p | xsel -i; xsel -o | xsel -i -b
# copy directory name
map yd shell -f echo -n %d    | xsel -i; xsel -o | xsel -i -b
# copy filename
map yn shell -f echo -n %f    | xsel -i; xsel -o | xsel -i -b

# Filesystem Operations
map =  chmod

map pp paste
map po paste overwrite=True
map pP paste append=True
map pO paste overwrite=True append=True
map pl paste_symlink relative=False
map pL paste_symlink relative=True
map phl paste_hardlink
map pht paste_hardlinked_subtree

map dD console delete

map dd cut
map ud uncut
map da cut mode=add
map dr cut mode=remove
map dt cut mode=toggle

map yy copy
map uy uncut
map ya copy mode=add
map yr copy mode=remove
map yt copy mode=toggle

# Temporary workarounds
map dgg eval fm.cut(dirarg=dict(to=0), narg=quantifier)
map dG  eval fm.cut(dirarg=dict(to=-1), narg=quantifier)
map dj  eval fm.cut(dirarg=dict(down=1), narg=quantifier)
map dk  eval fm.cut(dirarg=dict(up=1), narg=quantifier)
map ygg eval fm.copy(dirarg=dict(to=0), narg=quantifier)
map yG  eval fm.copy(dirarg=dict(to=-1), narg=quantifier)
map yj  eval fm.copy(dirarg=dict(down=1), narg=quantifier)
map yk  eval fm.copy(dirarg=dict(up=1), narg=quantifier)

# Searching
map /  console search%space
map n  search_next
map N  search_next forward=False
map ct search_next order=tag
map cs search_next order=size
map ci search_next order=mimetype
map cc search_next order=ctime
map cm search_next order=mtime
map ca search_next order=atime

# Sorting
map or set sort_reverse!
map oz set sort=random
map os chain set sort=size;      set sort_reverse=False
map ob chain set sort=basename;  set sort_reverse=False
map on chain set sort=natural;   set sort_reverse=False
map om chain set sort=mtime;     set sort_reverse=False
map oc chain set sort=ctime;     set sort_reverse=False
map oa chain set sort=atime;     set sort_reverse=False
map ot chain set sort=type;      set sort_reverse=False
map oe chain set sort=extension; set sort_reverse=False

map oS chain set sort=size;      set sort_reverse=True
map oB chain set sort=basename;  set sort_reverse=True
map oN chain set sort=natural;   set sort_reverse=True
map oM chain set sort=mtime;     set sort_reverse=True
map oC chain set sort=ctime;     set sort_reverse=True
map oA chain set sort=atime;     set sort_reverse=True
map oT chain set sort=type;      set sort_reverse=True
map oE chain set sort=extension; set sort_reverse=True

map dc get_cumulative_size

# Settings
map zc    set collapse_preview!
map zd    set sort_directories_first!
map zh    set show_hidden!
map zI    set flushinput!
map zi    set preview_images!
map zm    set mouse_enabled!
map zp    set preview_files!
map zP    set preview_directories!
map zs    set sort_case_insensitive!
map zu    set autoupdate_cumulative_size!
map zv    set use_preview_script!
map zf    console filter%space

# Bookmarks
map `<any>  enter_bookmark %any
map '<any>  enter_bookmark %any
map bg<any>  enter_bookmark %any
map bm<any>  set_bookmark %any
map br<any> unset_bookmark %any
map bb<bg>   draw_bookmarks
copymap bb<bg>  uB<bg> `<bg> '<bg>

# Generate all the chmod bindings with some python help:
eval for arg in "rwxXst": cmd("map +u{0} shell -f sudo chmod u+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +g{0} shell -f sudo chmod g+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +o{0} shell -f sudo chmod o+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +a{0} shell -f sudo chmod a+{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map +{0}  shell -f sudo chmod u+{0} %s".format(arg))

eval for arg in "rwxXst": cmd("map -u{0} shell -f sudo chmod u-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -g{0} shell -f sudo chmod g-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -o{0} shell -f sudo chmod o-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -a{0} shell -f sudo chmod a-{0} %s".format(arg))
eval for arg in "rwxXst": cmd("map -{0}  shell -f sudo chmod u-{0} %s".format(arg))

# ===================================================================
# == Define keys for the console
# ===================================================================
# Note: Unmapped keys are passed directly to the console.

# Basic
cmap <tab>   eval fm.ui.console.tab()
cmap <s-tab> eval fm.ui.console.tab(-1)
cmap <ESC>   eval fm.ui.console.close()
cmap <CR>    eval fm.ui.console.execute()
# cmap <C-l>   redraw_window

copycmap <ESC> <C-c>
copycmap <CR>  <C-j>

# Move around
cmap <up>    eval fm.ui.console.history_move(-1)
cmap <down>  eval fm.ui.console.history_move(1)
cmap <left>  eval fm.ui.console.move(left=1)
cmap <right> eval fm.ui.console.move(right=1)
cmap <home>  eval fm.ui.console.move(right=0, absolute=True)
cmap <end>   eval fm.ui.console.move(right=-1, absolute=True)
cmap <a-left>   eval fm.ui.console.move_word(left=1)
cmap <a-right>  eval fm.ui.console.move_word(right=1)

# Line Editing
cmap <backspace>  eval fm.ui.console.delete(-1)
cmap <delete>     eval fm.ui.console.delete(0)
cmap <C-w>        eval fm.ui.console.delete_word()
cmap <A-d>        eval fm.ui.console.delete_word(backward=False)
cmap <C-k>        eval fm.ui.console.delete_rest(1)
cmap <C-u>        eval fm.ui.console.delete_rest(-1)
cmap <C-y>        eval fm.ui.console.paste()

# And of course the emacs way
copycmap <up>        <C-p>
copycmap <down>      <C-n>
copycmap <left>      <C-b>
copycmap <right>     <C-f>
copycmap <home>      <C-a>
copycmap <end>       <C-e>
copycmap <delete>    <C-d>
copycmap <backspace> <C-h>

# Note: There are multiple ways to express backspaces.  <backspace> (code 263)
# and <backspace2> (code 127).  To be sure, use both.
copycmap <backspace> <backspace2>

# This special expression allows typing in numerals:
cmap <allow_quantifiers> false

# ===================================================================
# == Pager Keybindings
# ===================================================================

# Movement
pmap  <down>      pager_move  down=1
pmap  <up>        pager_move  up=1
pmap  <left>      pager_move  left=4
pmap  <right>     pager_move  right=4
pmap  <home>      pager_move  to=0
pmap  <end>       pager_move  to=-1
pmap  <pagedown>  pager_move  down=1.0  pages=True
pmap  <pageup>    pager_move  up=1.0    pages=True
pmap  <C-d>       pager_move  down=0.5  pages=True
pmap  <C-u>       pager_move  up=0.5    pages=True

copypmap <UP>       k  <C-p>
copypmap <DOWN>     j  <C-n> <CR>
copypmap <LEFT>     h
copypmap <RIGHT>    l
copypmap <HOME>     g
copypmap <END>      G
copypmap <C-d>      d
copypmap <C-u>      u
copypmap <PAGEDOWN> n  f  <C-F>  <Space>
copypmap <PAGEUP>   p  b  <C-B>

# Basic
# pmap     <C-l> redraw_window
pmap     <ESC> pager_close
copypmap <ESC> q Q i <F3>
pmap E      edit_file

# ===================================================================
# == Taskview Keybindings
# ===================================================================

# Movement
tmap <up>        taskview_move up=1
tmap <down>      taskview_move down=1
tmap <home>      taskview_move to=0
tmap <end>       taskview_move to=-1
tmap <pagedown>  taskview_move down=1.0  pages=True
tmap <pageup>    taskview_move up=1.0    pages=True
tmap <C-d>       taskview_move down=0.5  pages=True
tmap <C-u>       taskview_move up=0.5    pages=True

copytmap <UP>       k  <C-p>
copytmap <DOWN>     j  <C-n> <CR>
copytmap <HOME>     g
copytmap <END>      G
copytmap <C-u>      u
copytmap <PAGEDOWN> n  f  <C-F>  <Space>
copytmap <PAGEUP>   p  b  <C-B>

# Changing priority and deleting tasks
tmap J          eval -q fm.ui.taskview.task_move(-1)
tmap K          eval -q fm.ui.taskview.task_move(0)
tmap dd         eval -q fm.ui.taskview.task_remove()
tmap <pagedown> eval -q fm.ui.taskview.task_move(-1)
tmap <pageup>   eval -q fm.ui.taskview.task_move(0)
tmap <delete>   eval -q fm.ui.taskview.task_remove()

# Basic
tmap <C-l> redraw_window
tmap <ESC> taskview_close
copytmap <ESC> q Q w <C-c>


# ===================================================================
# == my custom bindings
# ===================================================================

# remove previous bindings
map gt noop

# switch between tab mode and midnight commander mode
map T set viewmode!

# go to directory
map gh cd ~
map gd cd ~/Documents
map gD cd ~/Downloads
map gk cd ~/Desktop
map gp cd ~/Pictures
map gw cd ~/Pictures/wallpapers
map gW cd ~/Websites
map gS cd ~/Pictures/screenshot
map gv cd ~/Videos
map gs cd ~/bin/scripts
map gG cd ~/git
map gt cd ~/Teachings
map gm cd ~/Music
map gb cd ~/backup
map gB cd ~/Books
map gM cd ~/mnt
map gP cd ~/mnt/Phone
map gi cd ~/.config/i3
map gl cd ~/git/linuxconfig

map grb cd /boot
map grd cd /dev
map gre cd /etc
map grh cd /home
map grm cd /mnt
map gro cd /opt
map grp cd /proc
map grr cd /run
map grsy cd /sys
map grsr cd /srv
map grt cd /tmp
map gru cd /usr
map grv cd /var


# Copy to directory
map ch shell cp -r %s ~
map cd shell cp -r %s ~/Documents
map cD shell cp -r %s ~/Downloads
map ck shell cp -r %s ~/Desktop
map cp shell cp -r %s ~/Pictures
map cw shell cp -r %s ~/Pictures/wallpapers
map cW shell cp -r %s ~/Websites
map cS shell cp -r %s ~/Pictures/screenshots
map cv shell cp -r %s ~/Videos
map cs shell cp -r %s ~/bin/scripts
map cG shell cp -r %s ~/git
map ct shell cp -r %s ~/Teachings
map cm shell cp -r %s ~/Music
map cb shell cp -r %s ~/backup
map cB shell cp -r %s ~/Books
map ci shell cp -r %s ~/.config/i3
map cl shell cp -r %s ~/git/linuxconfig


# Move to directory
map m noop
map mh shell mv %s ~
map md shell mv %s ~/Documents
map mD shell mv %s ~/Downloads
map mk shell mv %s ~/Desktop
map mp shell mv %s ~/Pictures
map mw shell mv %s ~/Pictures/wallpapers
map mW shell mv %s ~/Websites
map mS shell mv %s ~/Pictures/screenshots
map mv shell mv %s ~/Videos
map ms shell mv %s ~/bin/scripts
map mG shell mv %s ~/git 
map mt shell mv %s ~/Teachings
map mm shell mv %s ~/Music
map mb shell mv %s ~/backup
map mB shell mv %s ~/Books
map mi shell mv %s ~/.config/i3
map ml shell mv %s ~/git/linuxconfig



# tabs
map <C-n>     tab_new ~
map tt				tab_new %f
map q		   		tab_close 
map <TAB>     tab_move 1
map <S-TAB>   tab_move -1
map L					tab_move 1
map H					tab_move -1
map uu        tab_restore

map th tab_new ~
map td tab_new ~/Documents
map tD tab_new ~/Downloads
map tk tab_new ~/Desktop
map tp tab_new ~/Pictures
map tw tab_new ~/Pictures/wallpapers
map tW tab_new ~/Websites
map tS tab_new ~/Pictures/screenshots
map tv tab_new ~/Videos
map ts tab_new ~/bin/scripts
map tG tab_new ~/git
map tt tab_new ~/Teachings
map tM tab_new ~/mnt
map tP tab_new ~/mnt/Phone
map tm tab_new ~/Music
map tb tab_new ~/backup
map tB tab_new ~/Books
map ti tab_new ~/.config/i3

map g1     tab_open 1
map g2     tab_open 2
map g3     tab_open 3
map g4     tab_open 4
map g5     tab_open 5
map g6     tab_open 6
map g7     tab_open 7
map g8     tab_open 8
map g9     tab_open 9


# File manipulation
map <C-t> console touch%space 
map MK console mkdir%space 
map <C-r>  rename_append %f 
map R console rename%space
map A  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"))
map I  eval fm.open_console('rename ' + fm.thisfile.relative_path.replace("%", "%%"), position=7)
map <C-d> console delete
map X shell -f extract %f
map xt shell tar -xvf %f   #extract a non-compressed archive
map xg shell tar -xzvf %f  #extract a compressed archive
map xz shell gunzip %f     #extract a gzip file
map xZ shell unzip %f      #extract a zip file
map zz shell tar -cvzf %f.tar.gz %s  #create a compressed archive
map zt shell tar -cvf %f.tar %s  #create a non-compressed archive

# run script (my .bash_aliases don't work when evoking 'shell' command)
# map Smp shell mountphone.sh
# map Sup shell unmountphone.sh

# mount and unmount phone
map MP shell mountphone.sh
map UP shell unmountphone.sh

# Unmount
map <C-u> shell umount %f

# Open with ...
map G shell gimp %f &  #open file in Gimp
# set image as background
map BG shell feh --bg-fill %f

# functions in ~/.config/ranger/commands.py
map <C-f> fzf_select #search in current dir
map <alt>c fzf_locate #search entire filesystem
